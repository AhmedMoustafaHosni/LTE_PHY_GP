/*
% Function:		deinterleaver
% Description:	Deinterleaves ULSCH data from RI and ACK control information
% Inputs:		input_h 			Input bits
%				N_ri_bits			Number of RI control bits to deinterleave
%				N_ack_bits			Number of ACK control bits to deinterleave
%				N_l					Number of layers
%				Qm					Number of bits per modulation symbol
%				ri_h				RI control bits to interleave
% 				ack_h				ACK control bits to interleave
% Outputs:		*output_h			Output bits
%				*ri_h				Deinterleaved RI control bits
%				*ack_h				Deinterleaved ACK control bits
By: Ahmad Nour
*/

#include "deinterleaver.cuh"

int main(int argc, char **argv) {
	
	//Init. the input data (generated using this MATLAB code)
	/*
	rng(10);
	N_l = 1;            % Number of Layers
	Q_m = 6;           % Modulation Order (2=QPSK, 4=16QAM, 6=64QAM)
	N_ri_bits = 12;     % #RI bit (Should be multiples of 12)

	data_bits = randi([0 1],1,1728);
	ri_bits = randi([0 1],1,12*Q_m*N_l);
	ack_bits = [];                         

	interleaved_bits = channel_interleaver(data_bits, ri_bits, ack_bits, N_l, Q_m);
	[deinterleaved_bits, out_ri_bits, out_ack_bits] = channel_deinterleaver(in_bits, N_ri_bits, N_ack_bits, N_l, Q_m);

	*/

	const int N_l = 1;            // Number of Layers
	const int Qm = 6;			  // Modulation Order(2 = QPSK, 4 = 16QAM, 6 = 64QAM)
	const int N_ri = 12;		  //length of ri symbols

	const Byte input_h[] = { 1,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0 };
	const int N = sizeof(input_h) / sizeof(input_h[0]);				//length of input + RI

	//For output:
	Byte *output_h;
	Byte *ri_h;

	//Call the deinterleaver Function
	deinterleaver(input_h, &ri_h, &output_h, N, N_ri, Qm, N_l);
	const int N_RI = Qm*N_l * N_ri;						//length of RI bits
	const int N_data = N - N_RI;				//length of input

	//Print results
	//for (int i = 0; i < (N+N_ri); i++)
	//	printf("idx = %d \t %d\n", i + 1, output_h[i]);

	//printf("\n\n");

	//To compare with MATLAB results
	//Run the file (deinterleaver_Results.m)
	FILE *results;
	if ((results = freopen("deinterleaver_Results.m", "w+", stdout)) == NULL) {
		printf("Cannot open file.\n");
		exit(1);
	}

	printf("clear; clc;\noutput = [ ");
	for (int i = 0; i < (N_data); i++)
	{
		printf("%d", output_h[i]);
		if (i != (N_data - 1))
			printf(",");
	}

	printf(" ];\n");

	printf("ri = [ ");
	for (int i = 0; i < (N_RI); i++)
	{
		printf("%d", ri_h[i]);
		if (i != (N_RI - 1))
			printf(",");
	}

	printf(" ];\n");

	//Matlab code
	printf("rng(10);\nN_l = 1;\nQ_m = 6;\nN_ri_bits = 12;\ndata_bits = randi([0 1],1,1728);\nri_bits = randi([0 1],1,N_ri_bits*Q_m*N_l);\nack_bits = [];\ninterleaved = channel_interleaver(data_bits, ri_bits, ack_bits, N_l, Q_m);\n[output_MATLAB, ri_MATLAB, out_ack_bits] = channel_deinterleaver(interleaved, N_ri_bits, 0, N_l, Q_m); \nsum(abs(output_MATLAB - output))\nsum(abs(ri_MATLAB-ri))");
	fclose(results);
}